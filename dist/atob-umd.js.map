{"version":3,"file":"atob-umd.js","names":[],"mappings":"","sources":["atob-umd.js"],"sourcesContent":["/*!\n* atob-umd\n*\n* @link https://github.com/T1st3/atob-umd\n* @author T1st3\n* @version 0.7.0\n* @license https://github.com/T1st3/atob-umd/blob/master/LICENSE\n*\n*/\n\n/* global define */\n\n'use strict';\n\n(function (root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD\n    define([], factory);\n  } else if (typeof exports === 'object') {\n    // Node\n    module.exports = factory();\n  } else {\n    // Browser globals\n    root.Atob = factory();\n  }\n}(this, function () {\n  /**\n  * atob(), UMD style\n  * @module Atob\n  * @namespace Atob\n  */\n\n  /**\n  * @constructor\n  * @param {string} a\n  * @since 0.1.0\n  */\n  var Atob = function (a) {\n    this.a = '';\n    this.b = '';\n    if (typeof define === 'function' && define.amd) {\n      this.browser = true;\n    } else if (typeof exports === 'object') {\n      this.browser = false;\n    } else {\n      this.browser = true;\n    }\n    // set method if supplied\n    if (a) {\n      this.handle(a);\n      return this;\n    }\n    // keep chainability\n    return this;\n  };\n\n  /**\n  * handle A to B\n  * @method handle\n  * @memberof Atob\n  * @param {string} a\n  * @since 0.1.0\n  */\n  Atob.prototype.handle = function (a) {\n    // Check a\n    if (!a) {\n      // keep chainability\n      return this;\n    }\n    this.a = a;\n\n    if (this.browser === true) {\n      /* global window */\n      if (typeof window.atob === 'function') {\n        this.b = window.atob(a);\n      } else {\n        this.b = Atob.decode(a);\n      }\n    } else {\n      this.b = new Buffer(a, 'base64').toString('binary');\n    }\n    // keep chainability\n    return this;\n  };\n\n  /**\n  * decode fix for browser which don't support atob\n  * @method decode\n  * @memberof Atob\n  * @param {string} a\n  * @since 0.2.0\n  */\n  Atob.decode = function (a) {\n    if (!a || arguments.length === 0) {\n      return '';\n    }\n    var _byte = [],\n    _char = [],\n    _result = [],\n    j = 0,\n    i = 0,\n    CHAR_MAP = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\n    /*jshint bitwise: false*/\n    while ((a.length % 4) !== 0) {\n      a += '=';\n    }\n    for (i = 0; i < a.length; i += 4) {\n      _char[0] = CHAR_MAP.indexOf(a.charAt(i));\n      _char[1] = CHAR_MAP.indexOf(a.charAt(i + 1));\n      _char[2] = CHAR_MAP.indexOf(a.charAt(i + 2));\n      _char[3] = CHAR_MAP.indexOf(a.charAt(i + 3));\n      _byte[0] = (_char[0] << 2) | (_char[1] >> 4);\n      _byte[1] = ((_char[1] & 15) << 4) | (_char[2] >> 2);\n      _byte[2] = ((_char[2] & 3) << 6) | _char[3];\n      _result[j++] = String.fromCharCode(_byte[0]);\n      if (_char[2] !== 64) {\n        _result[j++] = String.fromCharCode(_byte[1]);\n      }\n      if (_char[3] !== 64) {\n        _result[j++] = String.fromCharCode(_byte[2]);\n      }\n    }\n    return _result.join('');\n  };\n\n  return Atob;\n}));\n"],"sourceRoot":"/source/"}